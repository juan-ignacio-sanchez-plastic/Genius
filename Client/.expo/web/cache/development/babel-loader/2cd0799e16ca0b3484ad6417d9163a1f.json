{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Juany\\\\Escritorio Jun 2020\\\\Programacion\\\\React Native\\\\Genius\\\\Client\\\\screens\\\\AddOrEditCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport moment from 'moment';\nimport { List } from 'react-native-paper';\nimport { globalStyles } from \"../styles/globalStyles\";\nimport Button from \"../shared/Button\";\nimport { showFadeMessage } from \"../sharedFunctions\";\nvar reviewSchema = yup.object({\n  front: yup.string().max(1000).required(),\n  answer: yup.string().max(1000).required()\n});\nvar multipleChoiceSchema = yup.object({\n  front: yup.string().max(1000).required(),\n  answer: yup.string().max(1000).required()\n});\nexport default function AddOrEditCard(_ref) {\n  var navigation = _ref.navigation;\n  var addCard = navigation.getParam('addCard');\n  var card = navigation.getParam('item');\n  var editCard = navigation.getParam('editCard');\n  var deckTitle = navigation.getParam('deckTitle');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fadeMessage = _useState2[0],\n      setFadeMessage = _useState2[1];\n\n  var _useState3 = useState(card ? card.type : 'Remember card'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      expandedList = _useState6[0],\n      setExpandedList = _useState6[1];\n\n  return React.createElement(ScrollView, {\n    contentContainerStyle: {\n      flexGrow: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, globalStyles.container), globalStyles.subContainer),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      front: addCard ? '' : card.front,\n      answer: addCard ? '' : card.answer,\n      type: addCard ? type : card.type,\n      multipleChoiceIncorrectAnswers: addCard ? [null, null, null] : card.multipleChoiceIncorrectAnswers\n    },\n    validationSchema: type === 'Multiple choice card' ? multipleChoiceSchema : reviewSchema,\n    onSubmit: function onSubmit(values, actions) {\n      if (addCard) {\n        Keyboard.dismiss();\n        addCard(deckTitle, values);\n        actions.resetForm();\n      } else {\n        Keyboard.dismiss();\n\n        var editedCard = _objectSpread({\n          key: card.key\n        }, values);\n\n        if (editedCard.type !== 'Multiple choice card') editedCard.multipleChoiceIncorrectAnswers = [null, null, null];\n        editCard(deckTitle, editedCard);\n      }\n\n      setFadeMessage(addCard ? showFadeMessage('Card created') : showFadeMessage('Card modified'));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, function (formikProps) {\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 19\n      }\n    }, React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, React.createElement(List.Section, {\n      key: \"ListSection1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    }, React.createElement(List.Accordion, {\n      key: \"ListAccordion1\",\n      title: formikProps.values.type,\n      left: function left(props) {\n        return React.createElement(List.Icon, _extends({\n          key: \"ListIcon\"\n        }, props, {\n          icon: \"card-text-outline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 42\n          }\n        }));\n      },\n      onPress: function onPress() {\n        return setExpandedList(!expandedList);\n      },\n      expanded: expandedList,\n      theme: {\n        colors: {\n          primary: '#00a2e8'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, React.createElement(List.Item, {\n      key: \"ListItemRememberCard\",\n      title: \"Remember card\",\n      onPress: function onPress() {\n        setType('Remember card');\n        setExpandedList(!expandedList);\n        formikProps.handleChange('type')(\"Remember card\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 27\n      }\n    }), React.createElement(List.Item, {\n      key: \"ListItemFillCard\",\n      title: \"Fill card\",\n      onPress: function onPress() {\n        setType('Fill card');\n        setExpandedList(!expandedList);\n        formikProps.handleChange('type')(\"Fill card\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 27\n      }\n    }), React.createElement(List.Item, {\n      key: \"ListItemMultipleChoiceCard\",\n      title: \"Multiple choice card\",\n      onPress: function onPress() {\n        setType('Multiple choice card');\n        setExpandedList(!expandedList);\n        formikProps.handleChange('type')(\"Multiple choice card\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 27\n      }\n    })))), React.createElement(TextInput, {\n      key: \"front\",\n      multiline: true,\n      placeholder: \"front\",\n      style: globalStyles.input,\n      value: formikProps.values.front,\n      onChangeText: formikProps.handleChange('front'),\n      onBlur: formikProps.handleBlur('front'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }), React.createElement(Text, {\n      key: \"errorMessageFront\",\n      style: globalStyles.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, formikProps.touched.front && formikProps.errors.front), type === 'Multiple choice card' ? React.createElement(React.Fragment, null, React.createElement(Text, {\n      key: \"titleCorrectAnswer\",\n      style: _objectSpread(_objectSpread(_objectSpread({}, globalStyles.titleText), globalStyles.greenColor), {}, {\n        marginBottom: 20\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 27\n      }\n    }, \"Correct answer:\"), React.createElement(TextInput, {\n      key: 'correctAnswer',\n      multiline: true,\n      placeholder: 'Write here the correct answer...',\n      style: globalStyles.input,\n      value: formikProps.values.answer,\n      onChangeText: formikProps.handleChange('answer'),\n      onBlur: formikProps.handleBlur('answer'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 27\n      }\n    }), React.createElement(Text, {\n      key: \"errorMessageCorrectAnswer\",\n      style: globalStyles.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 27\n      }\n    }, formikProps.touched.answer && formikProps.errors.answer), React.createElement(Text, {\n      key: \"titleIncorrectAnswers\",\n      style: _objectSpread(_objectSpread(_objectSpread({}, globalStyles.titleText), globalStyles.redColor), {}, {\n        marginTop: 30,\n        marginBottom: 20\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 27\n      }\n    }, \"Incorrect answers:\"), [1, 2, 3].map(function (_, i) {\n      return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n        key: \"incorrectAnswer\" + i,\n        multiline: true,\n        placeholder: 'Write here a not correct answer...',\n        style: globalStyles.input,\n        value: formikProps.values.multipleChoiceIncorrectAnswers[i],\n        onChangeText: formikProps.handleChange(\"multipleChoiceIncorrectAnswers[\" + i + \"]\"),\n        onBlur: formikProps.handleBlur(\"multipleChoiceIncorrectAnswers[\" + i + \"]\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 33\n        }\n      }), React.createElement(Text, {\n        key: \"errorMessageIncorrectAnswer\" + i,\n        style: globalStyles.errorText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 33\n        }\n      }, formikProps.touched.multipleChoiceIncorrectAnswers && formikProps.errors.multipleChoiceIncorrectAnswers));\n    })) : React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      key: \"correctAnswer2\",\n      multiline: true,\n      placeholder: \"answer\",\n      style: globalStyles.input,\n      value: formikProps.values.answer,\n      onChangeText: formikProps.handleChange('answer'),\n      onBlur: formikProps.handleBlur('answer'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 27\n      }\n    }), React.createElement(Text, {\n      key: \"errorMessageIncorrectAnswer2\",\n      style: globalStyles.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 27\n      }\n    }, formikProps.touched.answer && formikProps.errors.answer)), React.createElement(Button, {\n      key: \"saveButton\",\n      text: \"Save\",\n      onPress: formikProps.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    })), addCard ? React.createElement(Text, {\n      key: \"nextReviewMessage\",\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }, \"First review now\") : React.createElement(Text, {\n      key: \"nextReviewMessage2\",\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }, \"Next review: \", moment(card.nextReview).calendar()));\n  })), fadeMessage));\n}\nvar styles = StyleSheet.create({\n  text: _objectSpread(_objectSpread({}, globalStyles.text), {}, {\n    textAlign: 'center',\n    color: 'lightgray',\n    marginTop: 10\n  })\n});","map":{"version":3,"sources":["C:/Juany/Escritorio Jun 2020/Programacion/React Native/Genius/Client/screens/AddOrEditCard.js"],"names":["React","useState","Formik","Form","Field","yup","moment","List","globalStyles","Button","showFadeMessage","reviewSchema","object","front","string","max","required","answer","multipleChoiceSchema","AddOrEditCard","navigation","addCard","getParam","card","editCard","deckTitle","fadeMessage","setFadeMessage","type","setType","expandedList","setExpandedList","flexGrow","container","subContainer","flex","multipleChoiceIncorrectAnswers","values","actions","Keyboard","dismiss","resetForm","editedCard","key","formikProps","props","colors","primary","handleChange","input","handleBlur","errorText","touched","errors","titleText","greenColor","marginBottom","redColor","marginTop","map","_","i","handleSubmit","styles","text","nextReview","calendar","StyleSheet","create","textAlign","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, TextInput, View, Text, Keyboard, Animated, ScrollView } from 'react-native';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as yup from 'yup';\r\nimport moment from 'moment';\r\nimport { List } from 'react-native-paper';\r\n\r\nimport { globalStyles } from '../styles/globalStyles';\r\nimport Button from '../shared/Button';\r\nimport { showFadeMessage } from '../sharedFunctions';\r\n\r\nconst reviewSchema = yup.object({\r\n  front: yup.string().max(1000).required(),\r\n  answer: yup.string().max(1000).required(),\r\n});\r\n\r\nconst multipleChoiceSchema = yup.object({\r\n  front: yup.string().max(1000).required(),\r\n  answer: yup.string().max(1000).required(),\r\n  // TODO: Fix error. Brokes when fill the last incorrect answer\r\n  // multipleChoiceIncorrectAnswers: yup.array().of(\r\n  //   yup.string().max(1000).required('this is a required field').typeError('this is a required field') // need to add typeError because I define that by default the initial value is [null, null, null] and null is not an string, that's why I need to handle that error this way or inside yup.string('Error message')\r\n  // ),\r\n});\r\n\r\n\r\nexport default function AddOrEditCard ({ navigation }) {\r\n  const addCard = navigation.getParam('addCard');\r\n  const card = navigation.getParam('item');\r\n  const editCard = navigation.getParam('editCard');\r\n  const deckTitle = navigation.getParam('deckTitle');\r\n  const [fadeMessage, setFadeMessage] = useState(false);\r\n  const [type, setType] = useState(card ? card.type : 'Remember card');\r\n  const [expandedList, setExpandedList] = useState(false);\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\r\n      <View style={{ ...globalStyles.container, ...globalStyles.subContainer }}>\r\n        <View style={{ flex: 1 }}>\r\n          <Formik\r\n            initialValues={{ front: addCard ? '' : card.front, answer: addCard ? '' : card.answer, type: addCard ? type : card.type, multipleChoiceIncorrectAnswers: addCard ? [null, null, null] : card.multipleChoiceIncorrectAnswers }}\r\n            validationSchema={type === 'Multiple choice card' ? multipleChoiceSchema : reviewSchema}\r\n            onSubmit={(values, actions) => {\r\n              if (addCard) { // if addCard func doesn't exist then this component was called to edit the card not to add a new card\r\n                Keyboard.dismiss();\r\n                addCard(deckTitle, values);\r\n                actions.resetForm();\r\n              } else {\r\n                Keyboard.dismiss();\r\n                const editedCard = {\r\n                  key: card.key,\r\n                  ...values,\r\n                }\r\n                if (editedCard.type !== 'Multiple choice card')\r\n                  editedCard.multipleChoiceIncorrectAnswers = [null, null, null];\r\n                editCard(deckTitle, editedCard);\r\n              }\r\n              setFadeMessage(addCard  // save into fadeMessage variable the fade message component\r\n                ? showFadeMessage('Card created')\r\n                : showFadeMessage('Card modified')\r\n              )\r\n            }}\r\n          >\r\n            {\r\n              (formikProps) => (\r\n                <>\r\n                  <View>\r\n                    <View>\r\n                      <List.Section key='ListSection1'>\r\n                        <List.Accordion\r\n                          key='ListAccordion1'\r\n                          title={formikProps.values.type}\r\n                          left={props => <List.Icon key='ListIcon' {...props} icon=\"card-text-outline\" />}\r\n                          onPress={() => setExpandedList(!expandedList)}\r\n                          expanded={expandedList}\r\n                          theme={{ colors: { primary: '#00a2e8' } }}\r\n                        >\r\n                          <List.Item\r\n                            key='ListItemRememberCard'\r\n                            title=\"Remember card\"\r\n                            onPress={() => {\r\n                              setType('Remember card')\r\n                              setExpandedList(!expandedList)\r\n                              formikProps.handleChange('type')(\"Remember card\")\r\n                            }}\r\n                          />\r\n                          <List.Item\r\n                            key='ListItemFillCard'\r\n                            title=\"Fill card\"\r\n                            onPress={() => {\r\n                              setType('Fill card')\r\n                              setExpandedList(!expandedList)\r\n                              formikProps.handleChange('type')(\"Fill card\")\r\n                            }}\r\n                          />\r\n                          <List.Item\r\n                            key='ListItemMultipleChoiceCard'\r\n                            title=\"Multiple choice card\"\r\n                            onPress={() => {\r\n                              setType('Multiple choice card')\r\n                              setExpandedList(!expandedList)\r\n                              formikProps.handleChange('type')(\"Multiple choice card\")\r\n                            }}\r\n                          />\r\n                        </List.Accordion>\r\n                      </List.Section>\r\n                    </View>\r\n                    <TextInput\r\n                      key='front'\r\n                      multiline\r\n                      placeholder='front'\r\n                      style={globalStyles.input}\r\n                      value={formikProps.values.front}\r\n                      onChangeText={formikProps.handleChange('front')}\r\n                      onBlur={formikProps.handleBlur('front') /* to do a real time validation. Needed to display the error message if user is in front field and touch somewhere else */}\r\n                    />\r\n                    <Text key='errorMessageFront' style={globalStyles.errorText}>{formikProps.touched.front && formikProps.errors.front /* If user have touched front field and there don't pass the validation THEN will show a message saying why is not passing the validation */}</Text>\r\n                    {\r\n                      type === 'Multiple choice card'\r\n                        ? <>\r\n                          <Text\r\n                            key='titleCorrectAnswer'\r\n                            style={{ ...globalStyles.titleText, ...globalStyles.greenColor, marginBottom: 20 }}\r\n                          >Correct answer:</Text>\r\n                          <TextInput\r\n                            key={'correctAnswer'}\r\n                            multiline\r\n                            placeholder={'Write here the correct answer...'}\r\n                            style={globalStyles.input}\r\n                            value={formikProps.values.answer}\r\n                            onChangeText={formikProps.handleChange('answer')}\r\n                            onBlur={formikProps.handleBlur('answer')}\r\n                          />\r\n                          <Text key='errorMessageCorrectAnswer' style={globalStyles.errorText}>{formikProps.touched.answer && formikProps.errors.answer /* If user have touched front field and there don't pass the validation THEN will show a message saying why is not passing the validation */}</Text>\r\n                          <Text\r\n                            key='titleIncorrectAnswers'\r\n                            style={{ ...globalStyles.titleText, ...globalStyles.redColor, marginTop: 30, marginBottom: 20 }}\r\n                          >Incorrect answers:</Text>\r\n                          {\r\n                            [1, 2, 3].map((_, i) => (\r\n                              <>\r\n                                <TextInput\r\n                                  key={`incorrectAnswer${i}`}\r\n                                  multiline\r\n                                  placeholder={'Write here a not correct answer...'}\r\n                                  style={globalStyles.input}\r\n                                  value={formikProps.values.multipleChoiceIncorrectAnswers[i]}\r\n                                  onChangeText={formikProps.handleChange(`multipleChoiceIncorrectAnswers[${i}]`)}\r\n                                  onBlur={formikProps.handleBlur(`multipleChoiceIncorrectAnswers[${i}]`)}\r\n                                />\r\n                                <Text key={`errorMessageIncorrectAnswer${i}`} style={globalStyles.errorText}>{formikProps.touched.multipleChoiceIncorrectAnswers && formikProps.errors.multipleChoiceIncorrectAnswers}</Text>\r\n                              </>\r\n                            ))\r\n                          }\r\n                        </>\r\n                        : <>\r\n                          <TextInput\r\n                            key='correctAnswer2'\r\n                            multiline\r\n                            placeholder='answer'\r\n                            style={globalStyles.input}\r\n                            value={formikProps.values.answer}\r\n                            onChangeText={formikProps.handleChange('answer')}\r\n                            onBlur={formikProps.handleBlur('answer')}\r\n                          />\r\n                          <Text key='errorMessageIncorrectAnswer2' style={globalStyles.errorText}>{formikProps.touched.answer && formikProps.errors.answer}</Text>\r\n                        </>\r\n                    }\r\n                    <Button\r\n                      key='saveButton'\r\n                      text='Save'\r\n                      onPress={formikProps.handleSubmit}\r\n                    />\r\n                  </View>\r\n                  {\r\n                    addCard\r\n                      ? <Text key='nextReviewMessage' style={styles.text}>First review now</Text>\r\n                      : <Text key='nextReviewMessage2' style={styles.text}>Next review: {moment(card.nextReview).calendar()}</Text>\r\n                  }\r\n                </>\r\n              )\r\n            }\r\n          </Formik>\r\n        </View>\r\n        {\r\n          fadeMessage\r\n        }\r\n      </View >\r\n    </ScrollView >\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    ...globalStyles.text,\r\n    textAlign: 'center',\r\n    color: 'lightgray',\r\n    marginTop: 10,\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}