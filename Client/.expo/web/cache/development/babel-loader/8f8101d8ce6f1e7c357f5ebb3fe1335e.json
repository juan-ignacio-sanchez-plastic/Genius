{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Juany\\\\Escritorio Jun 2020\\\\Programacion\\\\React Native\\\\Genius\\\\Client\\\\screens\\\\AddOrEditCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport moment from 'moment';\nimport { List } from 'react-native-paper';\nimport { globalStyles } from \"../styles/globalStyles\";\nimport FlatButton from \"../shared/button\";\nvar reviewSchema = yup.object({\n  front: yup.string().max(1000).required(),\n  answer: yup.string().max(1000).required()\n});\nexport default function AddOrEditCard(_ref) {\n  var navigation = _ref.navigation;\n  var addCard = navigation.getParam('addCard');\n  var card = navigation.getParam('item');\n  var editCard = navigation.getParam('editCard');\n  var deckTitle = navigation.getParam('deckTitle');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fadeMessage = _useState2[0],\n      setFadeMessage = _useState2[1];\n\n  var _useState3 = useState('Remember card'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedList = _React$useState2[0],\n      setExpandedList = _React$useState2[1];\n\n  var handlePress = function handlePress() {\n    return setExpandedList(!expandedList);\n  };\n\n  var fadeValue = new Animated.Value(1);\n\n  var showMessage = function showMessage() {\n    Animated.timing(fadeValue, {\n      toValue: 0,\n      duration: 3000\n    }).start();\n  };\n\n  return React.createElement(View, {\n    style: _objectSpread({}, globalStyles.container),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      front: addCard ? '' : card.front,\n      answer: addCard ? '' : card.answer,\n      type: addCard ? type : card.type\n    },\n    validationSchema: reviewSchema,\n    onSubmit: function onSubmit(values, actions) {\n      if (addCard) {\n        Keyboard.dismiss();\n        addCard(deckTitle, values);\n        actions.resetForm();\n      } else {\n        Keyboard.dismiss();\n        editCard(deckTitle, card.key, values.front, values.answer);\n      }\n\n      setFadeMessage(false);\n      setFadeMessage(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, function (formikProps) {\n    return React.createElement(ScrollView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, React.createElement(List.Section, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, React.createElement(List.Accordion, {\n      title: type,\n      left: function left(props) {\n        return React.createElement(List.Icon, _extends({}, props, {\n          icon: \"card-text-outline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 38\n          }\n        }));\n      },\n      onPress: handlePress,\n      expanded: expandedList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, React.createElement(List.Item, {\n      title: \"Remember card\",\n      onPress: function onPress() {\n        setType('Remember card');\n        setExpandedList(!expandedList);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 23\n      }\n    }), React.createElement(List.Item, {\n      title: \"Fill card\",\n      onPress: function onPress() {\n        setType('Fill card');\n        setExpandedList(!expandedList);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }\n    })))), React.createElement(TextInput, {\n      style: globalStyles.input,\n      placeholder: \"front\",\n      multiline: true,\n      value: formikProps.values.front,\n      onChangeText: formikProps.handleChange('front'),\n      onBlur: formikProps.handleBlur('front'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: globalStyles.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, formikProps.touched.front && formikProps.errors.front), React.createElement(TextInput, {\n      multiline: true,\n      style: globalStyles.input,\n      placeholder: \"answer\",\n      multiline: true,\n      value: formikProps.values.answer,\n      onChangeText: formikProps.handleChange('answer'),\n      onBlur: formikProps.handleBlur('answer'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: globalStyles.errorText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, formikProps.touched.answer && formikProps.errors.answer), React.createElement(FlatButton, {\n      text: \"Save\",\n      onPress: formikProps.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    })), addCard ? React.createElement(Text, {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, \"First review in 10 min\") : React.createElement(Text, {\n      style: styles.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, \"Next review: \", moment(card.nextReview).calendar()));\n  }), fadeMessage && (showMessage(), React.createElement(View, {\n    style: globalStyles.fadeMessageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, React.createElement(Animated.View, {\n    style: _objectSpread({\n      opacity: fadeValue\n    }, globalStyles.fadeMessage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, addCard ? 'Card created' : 'Card modified')))));\n}\nvar styles = StyleSheet.create({\n  text: _objectSpread(_objectSpread({}, globalStyles.text), {}, {\n    textAlign: 'center',\n    color: 'lightgray',\n    marginTop: 10\n  })\n});","map":{"version":3,"sources":["C:/Juany/Escritorio Jun 2020/Programacion/React Native/Genius/Client/screens/AddOrEditCard.js"],"names":["React","useState","Formik","yup","moment","List","globalStyles","FlatButton","reviewSchema","object","front","string","max","required","answer","AddOrEditCard","navigation","addCard","getParam","card","editCard","deckTitle","fadeMessage","setFadeMessage","type","setType","expandedList","setExpandedList","handlePress","fadeValue","Animated","Value","showMessage","timing","toValue","duration","start","container","values","actions","Keyboard","dismiss","resetForm","key","formikProps","props","input","handleChange","handleBlur","errorText","touched","errors","handleSubmit","styles","text","nextReview","calendar","fadeMessageContainer","opacity","StyleSheet","create","textAlign","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, Button, TextInput, View, Text, Keyboard, Animated, ScrollView } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport moment from 'moment';\r\nimport { List } from 'react-native-paper';\r\n\r\nimport { globalStyles } from '../styles/globalStyles';\r\nimport FlatButton from '../shared/button';\r\n\r\nconst reviewSchema = yup.object({\r\n  front: yup.string().max(1000).required(),\r\n  answer: yup.string().max(1000).required(),\r\n});\r\n\r\nexport default function AddOrEditCard ({ navigation }) {\r\n  const addCard = navigation.getParam('addCard');\r\n  const card = navigation.getParam('item');\r\n  const editCard = navigation.getParam('editCard');\r\n  const deckTitle = navigation.getParam('deckTitle');\r\n  const [fadeMessage, setFadeMessage] = useState(false);\r\n  const [type, setType] = useState('Remember card');\r\n  const [expandedList, setExpandedList] = React.useState(false);\r\n  const handlePress = () => setExpandedList(!expandedList);\r\n\r\n\r\n  const fadeValue = new Animated.Value(1);  // 1 because starts completly visible\r\n\r\n  const showMessage = () => {\r\n    Animated.timing(fadeValue, {\r\n      toValue: 0, // 0 because after the 3000 ms it's not visible\r\n      duration: 3000\r\n    }).start();\r\n  };\r\n\r\n  return (\r\n    <View style={{ ...globalStyles.container }}>\r\n      <Formik\r\n        initialValues={{ front: addCard ? '' : card.front, answer: addCard ? '' : card.answer, type: addCard ? type : card.type }} // define the form fields and it's initial values\r\n        validationSchema={reviewSchema} // to add a validation schema\r\n        onSubmit={(values, actions) => {\r\n          if (addCard) { // if addCard func doesn't exist then this component was called to edit the card not to add a new card\r\n            Keyboard.dismiss();\r\n            addCard(deckTitle, values);\r\n            actions.resetForm();    // to reset the form\r\n          } else {\r\n            Keyboard.dismiss();\r\n            editCard(deckTitle, card.key, values.front, values.answer);\r\n          }\r\n          setFadeMessage(false);\r\n          setFadeMessage(true);\r\n        }}\r\n      >\r\n        {\r\n          (formikProps) => (\r\n            <ScrollView>\r\n              <View>\r\n                <View>\r\n                  <List.Section>\r\n                    <List.Accordion\r\n                      title={type}\r\n                      left={props => <List.Icon {...props} icon=\"card-text-outline\" />}\r\n                      onPress={handlePress}\r\n                      expanded={expandedList}\r\n                    >\r\n                      <List.Item\r\n                        title=\"Remember card\"\r\n                        onPress={() => {\r\n                          setType('Remember card')\r\n                          setExpandedList(!expandedList)\r\n                        }}\r\n                      />\r\n                      <List.Item\r\n                        title=\"Fill card\"\r\n                        onPress={() => {\r\n                          setType('Fill card')\r\n                          setExpandedList(!expandedList)\r\n                        }}\r\n                      />\r\n                    </List.Accordion>\r\n                  </List.Section>\r\n                </View>\r\n                <TextInput\r\n                  style={globalStyles.input}\r\n                  placeholder='front'\r\n                  multiline={true}\r\n                  value={formikProps.values.front}\r\n                  onChangeText={formikProps.handleChange('front')}\r\n                  onBlur={formikProps.handleBlur('front') /* to do a real time validation. Needed to display the error message if user is in front field and touch somewhere else */}\r\n                />\r\n                <Text style={globalStyles.errorText}>{formikProps.touched.front && formikProps.errors.front /* If user have touched front field and there don't pass the validation THEN will show a message saying why is not passing the validation */}</Text>\r\n                <TextInput\r\n                  multiline\r\n                  style={globalStyles.input}\r\n                  placeholder='answer'\r\n                  multiline={true}\r\n                  value={formikProps.values.answer}\r\n                  onChangeText={formikProps.handleChange('answer')}\r\n                  onBlur={formikProps.handleBlur('answer')}\r\n                />\r\n                <Text style={globalStyles.errorText}>{formikProps.touched.answer && formikProps.errors.answer}</Text>\r\n                <FlatButton\r\n                  text='Save'\r\n                  onPress={formikProps.handleSubmit}\r\n                />\r\n              </View>\r\n              {\r\n                addCard\r\n                  ? <Text style={styles.text}>First review in 10 min</Text>\r\n                  : <Text style={styles.text}>Next review: {moment(card.nextReview).calendar()}</Text>\r\n              }\r\n            </ScrollView>\r\n          )\r\n        }\r\n      </Formik>\r\n      {\r\n        fadeMessage &&\r\n        (\r\n          showMessage(),\r\n          <View style={globalStyles.fadeMessageContainer}>\r\n            <Animated.View\r\n              style={{\r\n                opacity: fadeValue,\r\n                ...globalStyles.fadeMessage,\r\n              }}\r\n            >\r\n              <Text>{addCard ? 'Card created' : 'Card modified'}</Text>\r\n            </Animated.View>\r\n          </View>\r\n        )\r\n      }\r\n    </View >\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    ...globalStyles.text,\r\n    textAlign: 'center',\r\n    color: 'lightgray',\r\n    marginTop: 10,\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}