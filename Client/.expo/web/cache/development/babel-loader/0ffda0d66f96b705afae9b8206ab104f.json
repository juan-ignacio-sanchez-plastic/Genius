{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport config from \"./config\";\nimport { getData } from \"./sharedFunctions\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar baseURL = 'http://192.168.0.12:3200/';\n\nfunction fetchData(endpoint, options) {\n  return fetch(\"\" + baseURL + endpoint, options).then(function (res) {\n    return res.status !== 204 ? res.json() : res;\n  }).catch(function (err) {\n    console.error(\"Error fetching \" + baseURL + endpoint + \" with method \" + (options ? options.method : 'GET'));\n    console.error('Error: ', err);\n  });\n}\n\nfunction login(body) {\n  return fetchData('login', {\n    method: 'POST',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction register(body) {\n  return fetchData('register', {\n    method: 'POST',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n}\n\nfunction profile() {\n  var token;\n  return _regeneratorRuntime.async(function profile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getData(config.localTokenStorage));\n\n        case 2:\n          token = _context.sent;\n          return _context.abrupt(\"return\", fetchData(\"me\", {\n            method: 'GET',\n            credentials: 'include',\n            mode: 'cors',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \" + token\n            }\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAllCommunityDecks() {\n  return fetchData('decks', {\n    method: 'GET',\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nfunction shareDeck(deck) {\n  var token;\n  return _regeneratorRuntime.async(function shareDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getData(config.localTokenStorage));\n\n        case 2:\n          token = _context2.sent;\n\n          if (token) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", Alert.alert('Ooops!', 'You must log in to share your deck with the community'));\n\n        case 5:\n          return _context2.abrupt(\"return\", fetchData('deck', {\n            method: 'POST',\n            credentials: 'include',\n            mode: 'cors',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \" + token\n            },\n            body: JSON.stringify(deck)\n          }));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction downloadDeck(key) {\n  var token;\n  return _regeneratorRuntime.async(function downloadDeck$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(getData(config.localTokenStorage));\n\n        case 2:\n          token = _context3.sent;\n\n          if (token) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", Alert.alert('Ooops!', 'You must log in to download a deck'));\n\n        case 5:\n          return _context3.abrupt(\"return\", fetchData(\"deck/\" + key, {\n            method: 'GET',\n            credentials: 'include',\n            mode: 'cors',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': \"Bearer \" + token\n            }\n          }));\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  fetchData: fetchData,\n  login: login,\n  register: register,\n  profile: profile,\n  getAllCommunityDecks: getAllCommunityDecks,\n  shareDeck: shareDeck,\n  downloadDeck: downloadDeck\n};","map":{"version":3,"sources":["C:/Juany/Escritorio Jun 2020/Programacion/React Native/Genius/Client/apiClient.js"],"names":["config","getData","baseURL","fetchData","endpoint","options","fetch","then","res","status","json","catch","err","console","error","method","login","body","credentials","mode","headers","JSON","stringify","register","profile","localTokenStorage","token","getAllCommunityDecks","shareDeck","deck","Alert","alert","downloadDeck","key"],"mappings":"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","sourcesContent":["import config from './config';\r\nimport { getData } from './sharedFunctions';\r\nimport { Alert } from 'react-native';\r\n\r\nconst baseURL = 'http://192.168.0.12:3200/';\r\n\r\n\r\nfunction fetchData (endpoint, options) {\r\n  return fetch(`${baseURL}${endpoint}`, options)\r\n    // .then(res => res.status < 400 ? res : Promise.reject(res))  // Throws an error\r\n    .then(res => res.status !== 204 ? res.json() : res)\r\n    .catch(err => {\r\n      console.error(`Error fetching ${baseURL}${endpoint} with method ${options ? options.method : 'GET'}`);\r\n      console.error('Error: ', err);\r\n    });\r\n}\r\n\r\nfunction login (body) {\r\n  return fetchData('login', {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body),\r\n  });\r\n}\r\n\r\nfunction register (body) {\r\n  return fetchData('register', {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body),\r\n  });\r\n}\r\n\r\nasync function profile () {\r\n  const token = await getData(config.localTokenStorage);\r\n\r\n  return fetchData(`me`, {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n  });\r\n}\r\n\r\nfunction getAllCommunityDecks () {\r\n  return fetchData('decks', {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n}\r\n\r\nasync function shareDeck (deck) {\r\n  const token = await getData(config.localTokenStorage);\r\n\r\n  if (!token) return Alert.alert('Ooops!', 'You must log in to share your deck with the community');\r\n\r\n  return fetchData('deck', {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify(deck),\r\n  });\r\n}\r\n\r\nasync function downloadDeck (key) {\r\n  const token = await getData(config.localTokenStorage);\r\n\r\n  if (!token) return Alert.alert('Ooops!', 'You must log in to download a deck');\r\n\r\n  return fetchData(`deck/${key}`, {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n  });\r\n}\r\n\r\nexport default { fetchData, login, register, profile, getAllCommunityDecks, shareDeck, downloadDeck };\r\n"]},"metadata":{},"sourceType":"module"}